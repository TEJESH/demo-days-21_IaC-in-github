
Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/template from the dependency lock file
- Reusing previous version of hashicorp/aws from the dependency lock file
- Reusing previous version of hashicorp/random from the dependency lock file
- Using previously-installed hashicorp/random v3.1.0
- Using previously-installed hashicorp/template v2.2.0
- Using previously-installed hashicorp/aws v2.70.0


Warning: Version constraints inside provider configuration blocks are deprecated

  on main.tf line 3, in provider "aws":
   3:   version                 = "~> 2.43"

Terraform 0.13 and earlier allowed provider version constraints inside the
provider configuration block, but that is now deprecated and will be removed
in a future version of Terraform. To silence this warning, move the provider
version constraint into the required_providers block.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
jefeish, I initialized GHES (v3.1.0)
random_id.stack_id: Refreshing state... [id=g70]
aws_iam_role.ghes: Refreshing state... [id=jefeish-ghes-role]
aws_security_group.ghes: Refreshing state... [id=sg-02eb33bf3870fdcee]
aws_iam_policy_attachment.AmazonSSMManagedInstanceCore: Refreshing state... [id=AmazonSSMManagedInstanceCore]
aws_iam_policy_attachment.AmazonSSMDirectoryServiceAccess: Refreshing state... [id=AmazonSSMDirectoryServiceAccess]
aws_iam_policy_attachment.AmazonSSMReadOnlyAccess: Refreshing state... [id=AmazonSSMReadOnlyAccess]
aws_iam_policy_attachment.AmazonEC2RoleforSSM: Refreshing state... [id=AmazonEC2RoleforSSM]
aws_iam_policy_attachment.AmazonSSMAutomationRole: Refreshing state... [id=AmazonSSMAutomationRole]
aws_iam_policy_attachment.AmazonSSMFullAccess: Refreshing state... [id=AmazonSSMFullAccess]
aws_iam_policy_attachment.AmazonSSMMaintenanceWindowRole: Refreshing state... [id=AmazonSSMMaintenanceWindowRole]
aws_iam_instance_profile.ghes: Refreshing state... [id=jefeish-ghes-profile83bd]
aws_instance.ghes: Refreshing state... [id=i-041751f5df43117fa]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # aws_instance.ghes must be replaced
-/+ resource "aws_instance" "ghes" {
      ~ ami                          = "ami-00d2287082ec07849" -> "ami-088f1059f791c49ed" # forces replacement
      ~ arn                          = "arn:aws:ec2:us-west-1:953721827634:instance/i-041751f5df43117fa" -> (known after apply)
      ~ associate_public_ip_address  = true -> (known after apply)
      ~ availability_zone            = "us-west-1a" -> (known after apply)
      ~ cpu_core_count               = 8 -> (known after apply)
      ~ cpu_threads_per_core         = 2 -> (known after apply)
      - disable_api_termination      = false -> null
      - ebs_optimized                = false -> null
      - hibernation                  = false -> null
      + host_id                      = (known after apply)
      ~ id                           = "i-041751f5df43117fa" -> (known after apply)
      ~ instance_state               = "running" -> (known after apply)
      ~ ipv6_address_count           = 0 -> (known after apply)
      ~ ipv6_addresses               = [] -> (known after apply)
      - monitoring                   = false -> null
      + network_interface_id         = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      ~ primary_network_interface_id = "eni-0dc7c34c6e2f9eb16" -> (known after apply)
      ~ private_dns                  = "ip-172-31-9-181.us-west-1.compute.internal" -> (known after apply)
      ~ private_ip                   = "172.31.9.181" -> (known after apply)
      ~ public_dns                   = "ec2-54-176-222-42.us-west-1.compute.amazonaws.com" -> (known after apply)
      ~ public_ip                    = "54.176.222.42" -> (known after apply)
      ~ subnet_id                    = "subnet-dde17d86" -> (known after apply)
      ~ tags                         = {
          ~ "Name" = "jefeish-ghes-v2.22.11-83bd" -> "jefeish-ghes-v3.1.0-83bd"
        }
      ~ tenancy                      = "default" -> (known after apply)
      ~ volume_tags                  = {} -> (known after apply)
      ~ vpc_security_group_ids       = [
          - "sg-02eb33bf3870fdcee",
        ] -> (known after apply)
        # (6 unchanged attributes hidden)

      + ebs_block_device {
          + delete_on_termination = false
          + device_name           = "/dev/sdb"
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 1024
          + volume_type           = "gp2"
        }
      - ebs_block_device {
          - delete_on_termination = false -> null
          - device_name           = "/dev/sdb" -> null
          - encrypted             = false -> null
          - iops                  = 3072 -> null
          - volume_id             = "vol-08714005679912d44" -> null
          - volume_size           = 1024 -> null
          - volume_type           = "gp2" -> null
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      ~ metadata_options {
          ~ http_endpoint               = "enabled" -> (known after apply)
          ~ http_put_response_hop_limit = 1 -> (known after apply)
          ~ http_tokens                 = "optional" -> (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      ~ root_block_device {
          ~ delete_on_termination = true -> (known after apply)
          ~ device_name           = "/dev/sda1" -> (known after apply)
          ~ encrypted             = false -> (known after apply)
          ~ iops                  = 600 -> (known after apply)
          + kms_key_id            = (known after apply)
          ~ volume_id             = "vol-0ea3d7254d21287f9" -> (known after apply)
          ~ volume_size           = 200 -> (known after apply)
          ~ volume_type           = "gp2" -> (known after apply)
        }
    }

Plan: 1 to add, 0 to change, 1 to destroy.

Changes to Outputs:
  ~ instance = "ec2-54-176-222-42.us-west-1.compute.amazonaws.com" -> (known after apply)

Warning: Version constraints inside provider configuration blocks are deprecated

  on main.tf line 3, in provider "aws":
   3:   version                 = "~> 2.43"

Terraform 0.13 and earlier allowed provider version constraints inside the
provider configuration block, but that is now deprecated and will be removed
in a future version of Terraform. To silence this warning, move the provider
version constraint into the required_providers block.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: 
aws_instance.ghes: Destroying... [id=i-041751f5df43117fa]
aws_instance.ghes: Still destroying... [id=i-041751f5df43117fa, 10s elapsed]
aws_instance.ghes: Still destroying... [id=i-041751f5df43117fa, 20s elapsed]
aws_instance.ghes: Still destroying... [id=i-041751f5df43117fa, 30s elapsed]
aws_instance.ghes: Destruction complete after 32s
aws_instance.ghes: Creating...
aws_instance.ghes: Still creating... [10s elapsed]
aws_instance.ghes: Creation complete after 17s [id=i-0ffdc3812167de221]

Apply complete! Resources: 1 added, 0 changed, 1 destroyed.

Outputs:

instance = "ec2-54-67-79-126.us-west-1.compute.amazonaws.com"
[Fri Jun 11 2021 03:27:18 GMT-0400 (Eastern Daylight Time)] INFO hubot-slack adapter v4.9.0
[Fri Jun 11 2021 03:27:19 GMT-0400 (Eastern Daylight Time)] INFO Logged in as @hubot in workspace mole
[Fri Jun 11 2021 03:27:19 GMT-0400 (Eastern Daylight Time)] INFO Connected to Slack RTM
[Fri Jun 11 2021 03:27:19 GMT-0400 (Eastern Daylight Time)] WARNING Loading scripts from hubot-scripts.json is deprecated and will be removed in 3.0 (https://github.com/github/hubot-scripts/issues/1113) in favor of packages for each script.

The following scripts have known replacements. Follow the link for installation instructions, then remove it from hubot-scripts.json:

The following scripts donâ€™t have (known) replacements. You can try searching https://www.npmjs.com/ or http://github.com/search or your favorite search engine. You can copy the script into your local scripts directory, or consider creating a new package to maintain yourself. If you find a replacement or create a package yourself, please post on https://github.com/github/hubot-scripts/issues/1641:
* hubot-demodays
* example

You an also try updating hubot-scripts to get the latest list of replacements: npm install --save hubot-scripts@latest
[Fri Jun 11 2021 03:27:19 GMT-0400 (Eastern Daylight Time)] INFO hubot-redis-brain: Using default redis on localhost:6379
[Fri Jun 11 2021 03:27:19 GMT-0400 (Eastern Daylight Time)] ERROR hubot-heroku-keepalive included, but missing HUBOT_HEROKU_KEEPALIVE_URL. `heroku config:set HUBOT_HEROKU_KEEPALIVE_URL=$(heroku apps:info -s | grep web.url | cut -d= -f2)`
[Fri Jun 11 2021 03:27:19 GMT-0400 (Eastern Daylight Time)] INFO hubot-redis-brain: Data for hubot brain retrieved from Redis
