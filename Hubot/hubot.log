
Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/template...
- Finding hashicorp/aws versions matching "~> 2.43"...
- Installing hashicorp/template v2.2.0...
- Installed hashicorp/template v2.2.0 (self-signed, key ID 34365D9472D7468F)
- Installing hashicorp/aws v2.70.0...
- Installed hashicorp/aws v2.70.0 (self-signed, key ID 34365D9472D7468F)

Partner and community providers are signed by their developers.
If you'd like to know more about provider signing, you can read about it here:
https://www.terraform.io/docs/cli/plugins/signing.html

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.


Warning: Version constraints inside provider configuration blocks are deprecated

  on main.tf line 3, in provider "aws":
   3:   version                 = "~> 2.43"

Terraform 0.13 and earlier allowed provider version constraints inside the
provider configuration block, but that is now deprecated and will be removed
in a future version of Terraform. To silence this warning, move the provider
version constraint into the required_providers block.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_instance_profile.ghes will be created
  + resource "aws_iam_instance_profile" "ghes" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "jefeish-ghes-profile"
      + path        = "/"
      + role        = "jefeish-ghes-role"
      + roles       = (known after apply)
      + unique_id   = (known after apply)
    }

  # aws_iam_policy_attachment.AmazonEC2RoleforSSM will be created
  + resource "aws_iam_policy_attachment" "AmazonEC2RoleforSSM" {
      + id         = (known after apply)
      + name       = "AmazonEC2RoleforSSM"
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      + roles      = [
          + "jefeish-ghes-role",
        ]
    }

  # aws_iam_policy_attachment.AmazonSSMAutomationRole will be created
  + resource "aws_iam_policy_attachment" "AmazonSSMAutomationRole" {
      + id         = (known after apply)
      + name       = "AmazonSSMAutomationRole"
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"
      + roles      = [
          + "jefeish-ghes-role",
        ]
    }

  # aws_iam_policy_attachment.AmazonSSMDirectoryServiceAccess will be created
  + resource "aws_iam_policy_attachment" "AmazonSSMDirectoryServiceAccess" {
      + id         = (known after apply)
      + name       = "AmazonSSMDirectoryServiceAccess"
      + policy_arn = "arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess"
      + roles      = [
          + "jefeish-ghes-role",
        ]
    }

  # aws_iam_policy_attachment.AmazonSSMFullAccess will be created
  + resource "aws_iam_policy_attachment" "AmazonSSMFullAccess" {
      + id         = (known after apply)
      + name       = "AmazonSSMFullAccess"
      + policy_arn = "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
      + roles      = [
          + "jefeish-ghes-role",
        ]
    }

  # aws_iam_policy_attachment.AmazonSSMMaintenanceWindowRole will be created
  + resource "aws_iam_policy_attachment" "AmazonSSMMaintenanceWindowRole" {
      + id         = (known after apply)
      + name       = "AmazonSSMMaintenanceWindowRole"
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole"
      + roles      = [
          + "jefeish-ghes-role",
        ]
    }

  # aws_iam_policy_attachment.AmazonSSMManagedInstanceCore will be created
  + resource "aws_iam_policy_attachment" "AmazonSSMManagedInstanceCore" {
      + id         = (known after apply)
      + name       = "AmazonSSMManagedInstanceCore"
      + policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      + roles      = [
          + "jefeish-ghes-role",
        ]
    }

  # aws_iam_policy_attachment.AmazonSSMReadOnlyAccess will be created
  + resource "aws_iam_policy_attachment" "AmazonSSMReadOnlyAccess" {
      + id         = (known after apply)
      + name       = "AmazonSSMReadOnlyAccess"
      + policy_arn = "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
      + roles      = [
          + "jefeish-ghes-role",
        ]
    }

  # aws_iam_role.ghes will be created
  + resource "aws_iam_role" "ghes" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "jefeish-ghes-role"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_instance.ghes will be created
  + resource "aws_instance" "ghes" {
      + ami                          = "ami-0c3a0b829ab724ad7"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "c5.4xlarge"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "automation-demo-key"
      + network_interface_id         = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = [
          + "jefeish-ghes-test-sg",
        ]
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Name" = "jefeish-ghes-v3.0.1"
        }
      + tenancy                      = (known after apply)
      + user_data                    = "b992434b921949b76971bb60b3893cc49e64c817"
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = false
          + device_name           = "/dev/sdb"
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 1024
          + volume_type           = "gp2"
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_security_group.ghes will be created
  + resource "aws_security_group" "ghes" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "HTTP"
              + from_port        = 8080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 8080
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "HTTP"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "HTTPS"
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "HTTPS"
              + from_port        = 8443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 8443
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "MySQL"
              + from_port        = 3306
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 3306
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "SSH"
              + from_port        = 122
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 122
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "SSH"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "jefeish-ghes-test-sg"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "jefeish-ghes-test-sg"
        }
      + vpc_id                 = "vpc-315cef56"
    }

Plan: 11 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + instance = (known after apply)

Warning: Version constraints inside provider configuration blocks are deprecated

  on main.tf line 3, in provider "aws":
   3:   version                 = "~> 2.43"

Terraform 0.13 and earlier allowed provider version constraints inside the
provider configuration block, but that is now deprecated and will be removed
in a future version of Terraform. To silence this warning, move the provider
version constraint into the required_providers block.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: 
aws_iam_role.ghes: Creating...
aws_security_group.ghes: Creating...
